name: Android Build and Deploy

on:
  push:
    branches:
      - dev
      - staging
      - main
    tags:
      - 'v*'
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-and-deploy:
    name: Build and Deploy to Google Play
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup EAS
        run: npm install -g eas-cli
        
      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      
      - name: Set deployment track based on branch
        id: set-track
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "TRACK=internal" >> $GITHUB_ENV
            echo "BUILD_PROFILE=preview" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "TRACK=closed" >> $GITHUB_ENV
            echo "BUILD_PROFILE=preview" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "TRACK=production" >> $GITHUB_ENV
            echo "BUILD_PROFILE=production" >> $GITHUB_ENV
          else
            echo "TRACK=internal" >> $GITHUB_ENV
            echo "BUILD_PROFILE=preview" >> $GITHUB_ENV
          fi
          
      - name: Build Android App Bundle
        id: build
        run: eas build --platform android --profile ${{ env.BUILD_PROFILE }} --non-interactive --no-wait
        
      - name: Wait for build to complete
        run: |
          # Get the latest build ID more reliably
          echo "Fetching the latest build ID..."
          sleep 10  # Give EAS some time to register the build
          
          # Try to get the build ID, with retries
          MAX_RETRIES=5
          RETRY_COUNT=0
          BUILD_ID=""
          
          while [ -z "$BUILD_ID" ] && [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Attempt $(($RETRY_COUNT + 1)) to get build ID..."
            BUILD_LIST=$(eas build:list --json --limit=1 --platform=android --status=in-queue,in-progress)
            
            if [ $? -eq 0 ] && [ ! -z "$BUILD_LIST" ]; then
              # Try to extract the build ID safely
              BUILD_ID=$(echo "$BUILD_LIST" | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)
            fi
            
            if [ -z "$BUILD_ID" ]; then
              echo "Could not get build ID, retrying in 10 seconds..."
              sleep 10
              RETRY_COUNT=$((RETRY_COUNT + 1))
            fi
          done
          
          if [ -z "$BUILD_ID" ]; then
            echo "Failed to get build ID after $MAX_RETRIES attempts. Checking for finished builds..."
            BUILD_LIST=$(eas build:list --json --limit=1 --platform=android --status=finished)
            BUILD_ID=$(echo "$BUILD_LIST" | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)
          fi
          
          if [ -z "$BUILD_ID" ]; then
            echo "Could not find any builds. Exiting with error."
            exit 1
          fi
          
          echo "Found build ID: $BUILD_ID"
          echo "Waiting for build to complete..."
          eas build:show $BUILD_ID --non-interactive --wait
          
      - name: Download latest build
        run: |
          echo "Fetching the latest finished build..."
          BUILD_LIST=$(eas build:list --json --limit=1 --platform=android --status=finished)
          BUILD_ID=$(echo "$BUILD_LIST" | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)
          
          if [ -z "$BUILD_ID" ]; then
            echo "Could not find any finished builds. Exiting with error."
            exit 1
          fi
          
          echo "Downloading build $BUILD_ID..."
          eas build:download --build-id $BUILD_ID --output=app-release.aab
          
      - name: Setup Google Play Service Account
        run: |
          echo '${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}' > service-account.json
          
      - name: Deploy to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: service-account.json
          packageName: com.trickydex.app
          releaseFiles: app-release.aab
          track: ${{ env.TRACK }}
          status: completed
